<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite errors="0" failures="4" hostname="Zhangwenke" name="pytest" skipped="0" tests="4" time="21.456" timestamp="2021-10-27T22:55:00.166604"><testcase classname="testsuite.test_KMS.TestCase_KMS" file="testsuite\test_KMS.py" line="16" name="test_login_kms[param0-\u7528\u6237\u6b63\u786e\u5bc6\u7801\u9519\u8bef-expect0]" tester="zhangwenke" time="21.020"><properties><property name="outcome" value="111"/><property name="log" value="&lt;_pytest.logging.LogCaptureFixture object at 0x0000020F9B9264E0&gt;"/></properties><failure message="requests.exceptions.ConnectionError: HTTPConnectionPool(host=&apos;119.123.2.1&apos;, port=8980): Max retries exceeded with url: /login (Caused by NewConnectionError(&apos;&lt;urllib3.connection.HTTPConnection object at 0x0000020F9B926DA0&gt;: Failed to establish a new connection: [WinError 10060] A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond&apos;))">self = &lt;urllib3.connection.HTTPConnection object at 0x0000020F9B926DA0&gt;

    def _new_conn(self):
        &quot;&quot;&quot; Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        &quot;&quot;&quot;
        extra_kw = {}
        if self.source_address:
            extra_kw[&apos;source_address&apos;] = self.source_address
    
        if self.socket_options:
            extra_kw[&apos;socket_options&apos;] = self.socket_options
    
        try:
            conn = connection.create_connection(
&gt;               (self._dns_host, self.port), self.timeout, **extra_kw)

..\..\..\..\AppData\Local\Programs\Python\Python37\lib\site-packages\urllib3\connection.py:160: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

address = (&apos;119.123.2.1&apos;, 8980), timeout = None, source_address = None
socket_options = [(6, 1, 1)]

    def create_connection(address, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,
                          source_address=None, socket_options=None):
        &quot;&quot;&quot;Connect to *address* and return the socket object.
    
        Convenience function.  Connect to *address* (a 2-tuple ``(host,
        port)``) and return the socket object.  Passing the optional
        *timeout* parameter will set the timeout on the socket instance
        before attempting to connect.  If no *timeout* is supplied, the
        global default timeout setting returned by :func:`getdefaulttimeout`
        is used.  If *source_address* is set it must be a tuple of (host, port)
        for the socket to bind as a source address before making the connection.
        An host of &apos;&apos; or port 0 tells the OS to use the default.
        &quot;&quot;&quot;
    
        host, port = address
        if host.startswith(&apos;[&apos;):
            host = host.strip(&apos;[]&apos;)
        err = None
    
        # Using the value from allowed_gai_family() in the context of getaddrinfo lets
        # us select whether to work with IPv4 DNS records, IPv6 records, or both.
        # The original create_connection function always returns all records.
        family = allowed_gai_family()
    
        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):
            af, socktype, proto, canonname, sa = res
            sock = None
            try:
                sock = socket.socket(af, socktype, proto)
    
                # If provided, set socket level options before connecting.
                _set_socket_options(sock, socket_options)
    
                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:
                    sock.settimeout(timeout)
                if source_address:
                    sock.bind(source_address)
                sock.connect(sa)
                return sock
    
            except socket.error as e:
                err = e
                if sock is not None:
                    sock.close()
                    sock = None
    
        if err is not None:
&gt;           raise err

..\..\..\..\AppData\Local\Programs\Python\Python37\lib\site-packages\urllib3\util\connection.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

address = (&apos;119.123.2.1&apos;, 8980), timeout = None, source_address = None
socket_options = [(6, 1, 1)]

    def create_connection(address, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,
                          source_address=None, socket_options=None):
        &quot;&quot;&quot;Connect to *address* and return the socket object.
    
        Convenience function.  Connect to *address* (a 2-tuple ``(host,
        port)``) and return the socket object.  Passing the optional
        *timeout* parameter will set the timeout on the socket instance
        before attempting to connect.  If no *timeout* is supplied, the
        global default timeout setting returned by :func:`getdefaulttimeout`
        is used.  If *source_address* is set it must be a tuple of (host, port)
        for the socket to bind as a source address before making the connection.
        An host of &apos;&apos; or port 0 tells the OS to use the default.
        &quot;&quot;&quot;
    
        host, port = address
        if host.startswith(&apos;[&apos;):
            host = host.strip(&apos;[]&apos;)
        err = None
    
        # Using the value from allowed_gai_family() in the context of getaddrinfo lets
        # us select whether to work with IPv4 DNS records, IPv6 records, or both.
        # The original create_connection function always returns all records.
        family = allowed_gai_family()
    
        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):
            af, socktype, proto, canonname, sa = res
            sock = None
            try:
                sock = socket.socket(af, socktype, proto)
    
                # If provided, set socket level options before connecting.
                _set_socket_options(sock, socket_options)
    
                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:
                    sock.settimeout(timeout)
                if source_address:
                    sock.bind(source_address)
&gt;               sock.connect(sa)
E               TimeoutError: [WinError 10060] A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond

..\..\..\..\AppData\Local\Programs\Python\Python37\lib\site-packages\urllib3\util\connection.py:70: TimeoutError

During handling of the above exception, another exception occurred:

self = &lt;urllib3.connectionpool.HTTPConnectionPool object at 0x0000020F9B8F32B0&gt;
method = &apos;POST&apos;, url = &apos;/login&apos;
body = &apos;id=12324235545&amp;params=name&amp;params=passcode&amp;params=check&apos;
headers = {&apos;User-Agent&apos;: &apos;python-requests/2.22.0&apos;, &apos;Accept-Encoding&apos;: &apos;gzip, deflate&apos;, &apos;Accept&apos;: &apos;*/*&apos;, &apos;Connection&apos;: &apos;keep-alive&apos;, &apos;Content-Length&apos;: &apos;55&apos;, &apos;Content-Type&apos;: &apos;application/x-www-form-urlencoded&apos;}
retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)
redirect = False, assert_same_host = False
timeout = &lt;urllib3.util.timeout.Timeout object at 0x0000020F9AC9A748&gt;
pool_timeout = None, release_conn = False, chunked = False, body_pos = None
response_kw = {&apos;decode_content&apos;: False, &apos;preload_content&apos;: False}, conn = None
release_this_conn = True, err = None, clean_exit = False
timeout_obj = &lt;urllib3.util.timeout.Timeout object at 0x0000020F9B90BE48&gt;
is_new_proxy_conn = False

    def urlopen(self, method, url, body=None, headers=None, retries=None,
                redirect=True, assert_same_host=True, timeout=_Default,
                pool_timeout=None, release_conn=None, chunked=False,
                body_pos=None, **response_kw):
        &quot;&quot;&quot;
        Get a connection from the pool and perform an HTTP request. This is the
        lowest level call for making a request, so you&apos;ll need to specify all
        the raw details.
    
        .. note::
    
           More commonly, it&apos;s appropriate to use a convenience method provided
           by :class:`.RequestMethods`, such as :meth:`request`.
    
        .. note::
    
           `release_conn` will only behave as expected if
           `preload_content=False` because we want to make
           `preload_content=False` the default behaviour someday soon without
           breaking backwards compatibility.
    
        :param method:
            HTTP request method (such as GET, POST, PUT, etc.)
    
        :param body:
            Data to send in the request body (useful for creating
            POST requests, see HTTPConnectionPool.post_url for
            more convenience).
    
        :param headers:
            Dictionary of custom headers to send, such as User-Agent,
            If-None-Match, etc. If None, pool headers are used. If provided,
            these headers completely replace any pool-specific headers.
    
        :param retries:
            Configure the number of retries to allow before raising a
            :class:`~urllib3.exceptions.MaxRetryError` exception.
    
            Pass ``None`` to retry until you receive a response. Pass a
            :class:`~urllib3.util.retry.Retry` object for fine-grained control
            over different types of retries.
            Pass an integer number to retry connection errors that many times,
            but no other types of errors. Pass zero to never retry.
    
            If ``False``, then retries are disabled and any exception is raised
            immediately. Also, instead of raising a MaxRetryError on redirects,
            the redirect response will be returned.
    
        :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.
    
        :param redirect:
            If True, automatically handle redirects (status codes 301, 302,
            303, 307, 308). Each redirect counts as a retry. Disabling retries
            will disable redirect, too.
    
        :param assert_same_host:
            If ``True``, will make sure that the host of the pool requests is
            consistent else will raise HostChangedError. When False, you can
            use the pool on an HTTP proxy and request foreign hosts.
    
        :param timeout:
            If specified, overrides the default timeout for this one
            request. It may be a float (in seconds) or an instance of
            :class:`urllib3.util.Timeout`.
    
        :param pool_timeout:
            If set and the pool is set to block=True, then this method will
            block for ``pool_timeout`` seconds and raise EmptyPoolError if no
            connection is available within the time period.
    
        :param release_conn:
            If False, then the urlopen call will not release the connection
            back into the pool once a response is received (but will release if
            you read the entire contents of the response such as when
            `preload_content=True`). This is useful if you&apos;re not preloading
            the response&apos;s content immediately. You will need to call
            ``r.release_conn()`` on the response ``r`` to return the connection
            back into the pool. If None, it takes the value of
            ``response_kw.get(&apos;preload_content&apos;, True)``.
    
        :param chunked:
            If True, urllib3 will send the body using chunked transfer
            encoding. Otherwise, urllib3 will send the body using the standard
            content-length form. Defaults to False.
    
        :param int body_pos:
            Position to seek to in file-like body in the event of a retry or
            redirect. Typically this won&apos;t need to be set because urllib3 will
            auto-populate the value when needed.
    
        :param \\**response_kw:
            Additional parameters are passed to
            :meth:`urllib3.response.HTTPResponse.from_httplib`
        &quot;&quot;&quot;
        if headers is None:
            headers = self.headers
    
        if not isinstance(retries, Retry):
            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)
    
        if release_conn is None:
            release_conn = response_kw.get(&apos;preload_content&apos;, True)
    
        # Check host
        if assert_same_host and not self.is_same_host(url):
            raise HostChangedError(self, url, retries)
    
        conn = None
    
        # Track whether `conn` needs to be released before
        # returning/raising/recursing. Update this variable if necessary, and
        # leave `release_conn` constant throughout the function. That way, if
        # the function recurses, the original value of `release_conn` will be
        # passed down into the recursive call, and its value will be respected.
        #
        # See issue #651 [1] for details.
        #
        # [1] &lt;https://github.com/shazow/urllib3/issues/651&gt;
        release_this_conn = release_conn
    
        # Merge the proxy headers. Only do this in HTTP. We have to copy the
        # headers dict so we can safely change it without those changes being
        # reflected in anyone else&apos;s copy.
        if self.scheme == &apos;http&apos;:
            headers = headers.copy()
            headers.update(self.proxy_headers)
    
        # Must keep the exception bound to a separate variable or else Python 3
        # complains about UnboundLocalError.
        err = None
    
        # Keep track of whether we cleanly exited the except block. This
        # ensures we do proper cleanup in finally.
        clean_exit = False
    
        # Rewind body position, if needed. Record current position
        # for future rewinds in the event of a redirect/retry.
        body_pos = set_file_position(body, body_pos)
    
        try:
            # Request a connection from the queue.
            timeout_obj = self._get_timeout(timeout)
            conn = self._get_conn(timeout=pool_timeout)
    
            conn.timeout = timeout_obj.connect_timeout
    
            is_new_proxy_conn = self.proxy is not None and not getattr(conn, &apos;sock&apos;, None)
            if is_new_proxy_conn:
                self._prepare_proxy(conn)
    
            # Make the request on the httplib connection object.
            httplib_response = self._make_request(conn, method, url,
                                                  timeout=timeout_obj,
                                                  body=body, headers=headers,
&gt;                                                 chunked=chunked)

..\..\..\..\AppData\Local\Programs\Python\Python37\lib\site-packages\urllib3\connectionpool.py:603: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;urllib3.connectionpool.HTTPConnectionPool object at 0x0000020F9B8F32B0&gt;
conn = &lt;urllib3.connection.HTTPConnection object at 0x0000020F9B926DA0&gt;
method = &apos;POST&apos;, url = &apos;/login&apos;
timeout = &lt;urllib3.util.timeout.Timeout object at 0x0000020F9B90BE48&gt;
chunked = False
httplib_request_kw = {&apos;body&apos;: &apos;id=12324235545&amp;params=name&amp;params=passcode&amp;params=check&apos;, &apos;headers&apos;: {&apos;User-Agent&apos;: &apos;python-requests/2.22.0&apos;...cept&apos;: &apos;*/*&apos;, &apos;Connection&apos;: &apos;keep-alive&apos;, &apos;Content-Length&apos;: &apos;55&apos;, &apos;Content-Type&apos;: &apos;application/x-www-form-urlencoded&apos;}}
timeout_obj = &lt;urllib3.util.timeout.Timeout object at 0x0000020F9B926710&gt;

    def _make_request(self, conn, method, url, timeout=_Default, chunked=False,
                      **httplib_request_kw):
        &quot;&quot;&quot;
        Perform a request on a given urllib connection object taken from our
        pool.
    
        :param conn:
            a connection from one of our connection pools
    
        :param timeout:
            Socket timeout in seconds for the request. This can be a
            float or integer, which will set the same timeout value for
            the socket connect and the socket read, or an instance of
            :class:`urllib3.util.Timeout`, which gives you more fine-grained
            control over your timeouts.
        &quot;&quot;&quot;
        self.num_requests += 1
    
        timeout_obj = self._get_timeout(timeout)
        timeout_obj.start_connect()
        conn.timeout = timeout_obj.connect_timeout
    
        # Trigger any extra validation we need to do.
        try:
            self._validate_conn(conn)
        except (SocketTimeout, BaseSSLError) as e:
            # Py2 raises this as a BaseSSLError, Py3 raises it as socket timeout.
            self._raise_timeout(err=e, url=url, timeout_value=conn.timeout)
            raise
    
        # conn.request() calls httplib.*.request, not the method in
        # urllib3.request. It also calls makefile (recv) on the socket.
        if chunked:
            conn.request_chunked(method, url, **httplib_request_kw)
        else:
&gt;           conn.request(method, url, **httplib_request_kw)

..\..\..\..\AppData\Local\Programs\Python\Python37\lib\site-packages\urllib3\connectionpool.py:355: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;urllib3.connection.HTTPConnection object at 0x0000020F9B926DA0&gt;
method = &apos;POST&apos;, url = &apos;/login&apos;
body = &apos;id=12324235545&amp;params=name&amp;params=passcode&amp;params=check&apos;
headers = {&apos;User-Agent&apos;: &apos;python-requests/2.22.0&apos;, &apos;Accept-Encoding&apos;: &apos;gzip, deflate&apos;, &apos;Accept&apos;: &apos;*/*&apos;, &apos;Connection&apos;: &apos;keep-alive&apos;, &apos;Content-Length&apos;: &apos;55&apos;, &apos;Content-Type&apos;: &apos;application/x-www-form-urlencoded&apos;}

    def request(self, method, url, body=None, headers={}, *,
                encode_chunked=False):
        &quot;&quot;&quot;Send a complete request to the server.&quot;&quot;&quot;
&gt;       self._send_request(method, url, body, headers, encode_chunked)

..\..\..\..\AppData\Local\Programs\Python\Python37\lib\http\client.py:1229: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;urllib3.connection.HTTPConnection object at 0x0000020F9B926DA0&gt;
method = &apos;POST&apos;, url = &apos;/login&apos;
body = b&apos;id=12324235545&amp;params=name&amp;params=passcode&amp;params=check&apos;
headers = {&apos;User-Agent&apos;: &apos;python-requests/2.22.0&apos;, &apos;Accept-Encoding&apos;: &apos;gzip, deflate&apos;, &apos;Accept&apos;: &apos;*/*&apos;, &apos;Connection&apos;: &apos;keep-alive&apos;, &apos;Content-Length&apos;: &apos;55&apos;, &apos;Content-Type&apos;: &apos;application/x-www-form-urlencoded&apos;}
encode_chunked = False

    def _send_request(self, method, url, body, headers, encode_chunked):
        # Honor explicitly requested Host: and Accept-Encoding: headers.
        header_names = frozenset(k.lower() for k in headers)
        skips = {}
        if &apos;host&apos; in header_names:
            skips[&apos;skip_host&apos;] = 1
        if &apos;accept-encoding&apos; in header_names:
            skips[&apos;skip_accept_encoding&apos;] = 1
    
        self.putrequest(method, url, **skips)
    
        # chunked encoding will happen if HTTP/1.1 is used and either
        # the caller passes encode_chunked=True or the following
        # conditions hold:
        # 1. content-length has not been explicitly set
        # 2. the body is a file or iterable, but not a str or bytes-like
        # 3. Transfer-Encoding has NOT been explicitly set by the caller
    
        if &apos;content-length&apos; not in header_names:
            # only chunk body if not explicitly set for backwards
            # compatibility, assuming the client code is already handling the
            # chunking
            if &apos;transfer-encoding&apos; not in header_names:
                # if content-length cannot be automatically determined, fall
                # back to chunked encoding
                encode_chunked = False
                content_length = self._get_content_length(body, method)
                if content_length is None:
                    if body is not None:
                        if self.debuglevel &gt; 0:
                            print(&apos;Unable to determine size of %r&apos; % body)
                        encode_chunked = True
                        self.putheader(&apos;Transfer-Encoding&apos;, &apos;chunked&apos;)
                else:
                    self.putheader(&apos;Content-Length&apos;, str(content_length))
        else:
            encode_chunked = False
    
        for hdr, value in headers.items():
            self.putheader(hdr, value)
        if isinstance(body, str):
            # RFC 2616 Section 3.7.1 says that text default has a
            # default charset of iso-8859-1.
            body = _encode(body, &apos;body&apos;)
&gt;       self.endheaders(body, encode_chunked=encode_chunked)

..\..\..\..\AppData\Local\Programs\Python\Python37\lib\http\client.py:1275: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;urllib3.connection.HTTPConnection object at 0x0000020F9B926DA0&gt;
message_body = b&apos;id=12324235545&amp;params=name&amp;params=passcode&amp;params=check&apos;

    def endheaders(self, message_body=None, *, encode_chunked=False):
        &quot;&quot;&quot;Indicate that the last header line has been sent to the server.
    
        This method sends the request to the server.  The optional message_body
        argument can be used to pass a message body associated with the
        request.
        &quot;&quot;&quot;
        if self.__state == _CS_REQ_STARTED:
            self.__state = _CS_REQ_SENT
        else:
            raise CannotSendHeader()
&gt;       self._send_output(message_body, encode_chunked=encode_chunked)

..\..\..\..\AppData\Local\Programs\Python\Python37\lib\http\client.py:1224: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;urllib3.connection.HTTPConnection object at 0x0000020F9B926DA0&gt;
message_body = b&apos;id=12324235545&amp;params=name&amp;params=passcode&amp;params=check&apos;
encode_chunked = False

    def _send_output(self, message_body=None, encode_chunked=False):
        &quot;&quot;&quot;Send the currently buffered request and clear the buffer.
    
        Appends an extra \\r\\n to the buffer.
        A message_body may be specified, to be appended to the request.
        &quot;&quot;&quot;
        self._buffer.extend((b&quot;&quot;, b&quot;&quot;))
        msg = b&quot;\r\n&quot;.join(self._buffer)
        del self._buffer[:]
&gt;       self.send(msg)

..\..\..\..\AppData\Local\Programs\Python\Python37\lib\http\client.py:1016: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;urllib3.connection.HTTPConnection object at 0x0000020F9B926DA0&gt;
data = b&apos;POST /login HTTP/1.1\r\nHost: 119.123.2.1:8980\r\nUser-Agent: python-requests/2.22.0\r\nAccept-Encoding: gzip, defla...Accept: */*\r\nConnection: keep-alive\r\nContent-Length: 55\r\nContent-Type: application/x-www-form-urlencoded\r\n\r\n&apos;

    def send(self, data):
        &quot;&quot;&quot;Send `data&apos; to the server.
        ``data`` can be a string object, a bytes object, an array object, a
        file-like object that supports a .read() method, or an iterable object.
        &quot;&quot;&quot;
    
        if self.sock is None:
            if self.auto_open:
&gt;               self.connect()

..\..\..\..\AppData\Local\Programs\Python\Python37\lib\http\client.py:956: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;urllib3.connection.HTTPConnection object at 0x0000020F9B926DA0&gt;

    def connect(self):
&gt;       conn = self._new_conn()

..\..\..\..\AppData\Local\Programs\Python\Python37\lib\site-packages\urllib3\connection.py:183: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;urllib3.connection.HTTPConnection object at 0x0000020F9B926DA0&gt;

    def _new_conn(self):
        &quot;&quot;&quot; Establish a socket connection and set nodelay settings on it.
    
        :return: New socket connection.
        &quot;&quot;&quot;
        extra_kw = {}
        if self.source_address:
            extra_kw[&apos;source_address&apos;] = self.source_address
    
        if self.socket_options:
            extra_kw[&apos;socket_options&apos;] = self.socket_options
    
        try:
            conn = connection.create_connection(
                (self._dns_host, self.port), self.timeout, **extra_kw)
    
        except SocketTimeout:
            raise ConnectTimeoutError(
                self, &quot;Connection to %s timed out. (connect timeout=%s)&quot; %
                (self.host, self.timeout))
    
        except SocketError as e:
            raise NewConnectionError(
&gt;               self, &quot;Failed to establish a new connection: %s&quot; % e)
E           urllib3.exceptions.NewConnectionError: &lt;urllib3.connection.HTTPConnection object at 0x0000020F9B926DA0&gt;: Failed to establish a new connection: [WinError 10060] A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond

..\..\..\..\AppData\Local\Programs\Python\Python37\lib\site-packages\urllib3\connection.py:169: NewConnectionError

During handling of the above exception, another exception occurred:

self = &lt;requests.adapters.HTTPAdapter object at 0x0000020F9B926FD0&gt;
request = &lt;PreparedRequest [POST]&gt;, stream = False
timeout = &lt;urllib3.util.timeout.Timeout object at 0x0000020F9AC9A748&gt;
verify = True, cert = None, proxies = OrderedDict()

    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):
        &quot;&quot;&quot;Sends PreparedRequest object. Returns Response object.
    
        :param request: The :class:`PreparedRequest &lt;PreparedRequest&gt;` being sent.
        :param stream: (optional) Whether to stream the request content.
        :param timeout: (optional) How long to wait for the server to send
            data before giving up, as a float, or a :ref:`(connect timeout,
            read timeout) &lt;timeouts&gt;` tuple.
        :type timeout: float or tuple or urllib3 Timeout object
        :param verify: (optional) Either a boolean, in which case it controls whether
            we verify the server&apos;s TLS certificate, or a string, in which case it
            must be a path to a CA bundle to use
        :param cert: (optional) Any user-provided SSL certificate to be trusted.
        :param proxies: (optional) The proxies dictionary to apply to the request.
        :rtype: requests.Response
        &quot;&quot;&quot;
    
        try:
            conn = self.get_connection(request.url, proxies)
        except LocationValueError as e:
            raise InvalidURL(e, request=request)
    
        self.cert_verify(conn, request.url, verify, cert)
        url = self.request_url(request, proxies)
        self.add_headers(request, stream=stream, timeout=timeout, verify=verify, cert=cert, proxies=proxies)
    
        chunked = not (request.body is None or &apos;Content-Length&apos; in request.headers)
    
        if isinstance(timeout, tuple):
            try:
                connect, read = timeout
                timeout = TimeoutSauce(connect=connect, read=read)
            except ValueError as e:
                # this may raise a string formatting error.
                err = (&quot;Invalid timeout {}. Pass a (connect, read) &quot;
                       &quot;timeout tuple, or a single float to set &quot;
                       &quot;both timeouts to the same value&quot;.format(timeout))
                raise ValueError(err)
        elif isinstance(timeout, TimeoutSauce):
            pass
        else:
            timeout = TimeoutSauce(connect=timeout, read=timeout)
    
        try:
            if not chunked:
                resp = conn.urlopen(
                    method=request.method,
                    url=url,
                    body=request.body,
                    headers=request.headers,
                    redirect=False,
                    assert_same_host=False,
                    preload_content=False,
                    decode_content=False,
                    retries=self.max_retries,
&gt;                   timeout=timeout
                )

..\..\..\..\AppData\Local\Programs\Python\Python37\lib\site-packages\requests\adapters.py:449: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;urllib3.connectionpool.HTTPConnectionPool object at 0x0000020F9B8F32B0&gt;
method = &apos;POST&apos;, url = &apos;/login&apos;
body = &apos;id=12324235545&amp;params=name&amp;params=passcode&amp;params=check&apos;
headers = {&apos;User-Agent&apos;: &apos;python-requests/2.22.0&apos;, &apos;Accept-Encoding&apos;: &apos;gzip, deflate&apos;, &apos;Accept&apos;: &apos;*/*&apos;, &apos;Connection&apos;: &apos;keep-alive&apos;, &apos;Content-Length&apos;: &apos;55&apos;, &apos;Content-Type&apos;: &apos;application/x-www-form-urlencoded&apos;}
retries = Retry(total=0, connect=None, read=False, redirect=None, status=None)
redirect = False, assert_same_host = False
timeout = &lt;urllib3.util.timeout.Timeout object at 0x0000020F9AC9A748&gt;
pool_timeout = None, release_conn = False, chunked = False, body_pos = None
response_kw = {&apos;decode_content&apos;: False, &apos;preload_content&apos;: False}, conn = None
release_this_conn = True, err = None, clean_exit = False
timeout_obj = &lt;urllib3.util.timeout.Timeout object at 0x0000020F9B90BE48&gt;
is_new_proxy_conn = False

    def urlopen(self, method, url, body=None, headers=None, retries=None,
                redirect=True, assert_same_host=True, timeout=_Default,
                pool_timeout=None, release_conn=None, chunked=False,
                body_pos=None, **response_kw):
        &quot;&quot;&quot;
        Get a connection from the pool and perform an HTTP request. This is the
        lowest level call for making a request, so you&apos;ll need to specify all
        the raw details.
    
        .. note::
    
           More commonly, it&apos;s appropriate to use a convenience method provided
           by :class:`.RequestMethods`, such as :meth:`request`.
    
        .. note::
    
           `release_conn` will only behave as expected if
           `preload_content=False` because we want to make
           `preload_content=False` the default behaviour someday soon without
           breaking backwards compatibility.
    
        :param method:
            HTTP request method (such as GET, POST, PUT, etc.)
    
        :param body:
            Data to send in the request body (useful for creating
            POST requests, see HTTPConnectionPool.post_url for
            more convenience).
    
        :param headers:
            Dictionary of custom headers to send, such as User-Agent,
            If-None-Match, etc. If None, pool headers are used. If provided,
            these headers completely replace any pool-specific headers.
    
        :param retries:
            Configure the number of retries to allow before raising a
            :class:`~urllib3.exceptions.MaxRetryError` exception.
    
            Pass ``None`` to retry until you receive a response. Pass a
            :class:`~urllib3.util.retry.Retry` object for fine-grained control
            over different types of retries.
            Pass an integer number to retry connection errors that many times,
            but no other types of errors. Pass zero to never retry.
    
            If ``False``, then retries are disabled and any exception is raised
            immediately. Also, instead of raising a MaxRetryError on redirects,
            the redirect response will be returned.
    
        :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.
    
        :param redirect:
            If True, automatically handle redirects (status codes 301, 302,
            303, 307, 308). Each redirect counts as a retry. Disabling retries
            will disable redirect, too.
    
        :param assert_same_host:
            If ``True``, will make sure that the host of the pool requests is
            consistent else will raise HostChangedError. When False, you can
            use the pool on an HTTP proxy and request foreign hosts.
    
        :param timeout:
            If specified, overrides the default timeout for this one
            request. It may be a float (in seconds) or an instance of
            :class:`urllib3.util.Timeout`.
    
        :param pool_timeout:
            If set and the pool is set to block=True, then this method will
            block for ``pool_timeout`` seconds and raise EmptyPoolError if no
            connection is available within the time period.
    
        :param release_conn:
            If False, then the urlopen call will not release the connection
            back into the pool once a response is received (but will release if
            you read the entire contents of the response such as when
            `preload_content=True`). This is useful if you&apos;re not preloading
            the response&apos;s content immediately. You will need to call
            ``r.release_conn()`` on the response ``r`` to return the connection
            back into the pool. If None, it takes the value of
            ``response_kw.get(&apos;preload_content&apos;, True)``.
    
        :param chunked:
            If True, urllib3 will send the body using chunked transfer
            encoding. Otherwise, urllib3 will send the body using the standard
            content-length form. Defaults to False.
    
        :param int body_pos:
            Position to seek to in file-like body in the event of a retry or
            redirect. Typically this won&apos;t need to be set because urllib3 will
            auto-populate the value when needed.
    
        :param \\**response_kw:
            Additional parameters are passed to
            :meth:`urllib3.response.HTTPResponse.from_httplib`
        &quot;&quot;&quot;
        if headers is None:
            headers = self.headers
    
        if not isinstance(retries, Retry):
            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)
    
        if release_conn is None:
            release_conn = response_kw.get(&apos;preload_content&apos;, True)
    
        # Check host
        if assert_same_host and not self.is_same_host(url):
            raise HostChangedError(self, url, retries)
    
        conn = None
    
        # Track whether `conn` needs to be released before
        # returning/raising/recursing. Update this variable if necessary, and
        # leave `release_conn` constant throughout the function. That way, if
        # the function recurses, the original value of `release_conn` will be
        # passed down into the recursive call, and its value will be respected.
        #
        # See issue #651 [1] for details.
        #
        # [1] &lt;https://github.com/shazow/urllib3/issues/651&gt;
        release_this_conn = release_conn
    
        # Merge the proxy headers. Only do this in HTTP. We have to copy the
        # headers dict so we can safely change it without those changes being
        # reflected in anyone else&apos;s copy.
        if self.scheme == &apos;http&apos;:
            headers = headers.copy()
            headers.update(self.proxy_headers)
    
        # Must keep the exception bound to a separate variable or else Python 3
        # complains about UnboundLocalError.
        err = None
    
        # Keep track of whether we cleanly exited the except block. This
        # ensures we do proper cleanup in finally.
        clean_exit = False
    
        # Rewind body position, if needed. Record current position
        # for future rewinds in the event of a redirect/retry.
        body_pos = set_file_position(body, body_pos)
    
        try:
            # Request a connection from the queue.
            timeout_obj = self._get_timeout(timeout)
            conn = self._get_conn(timeout=pool_timeout)
    
            conn.timeout = timeout_obj.connect_timeout
    
            is_new_proxy_conn = self.proxy is not None and not getattr(conn, &apos;sock&apos;, None)
            if is_new_proxy_conn:
                self._prepare_proxy(conn)
    
            # Make the request on the httplib connection object.
            httplib_response = self._make_request(conn, method, url,
                                                  timeout=timeout_obj,
                                                  body=body, headers=headers,
                                                  chunked=chunked)
    
            # If we&apos;re going to release the connection in ``finally:``, then
            # the response doesn&apos;t need to know about the connection. Otherwise
            # it will also try to release it and we&apos;ll have a double-release
            # mess.
            response_conn = conn if not release_conn else None
    
            # Pass method to Response for length checking
            response_kw[&apos;request_method&apos;] = method
    
            # Import httplib&apos;s response into our own wrapper object
            response = self.ResponseCls.from_httplib(httplib_response,
                                                     pool=self,
                                                     connection=response_conn,
                                                     retries=retries,
                                                     **response_kw)
    
            # Everything went great!
            clean_exit = True
    
        except queue.Empty:
            # Timed out by queue.
            raise EmptyPoolError(self, &quot;No pool connections are available.&quot;)
    
        except (TimeoutError, HTTPException, SocketError, ProtocolError,
                BaseSSLError, SSLError, CertificateError) as e:
            # Discard the connection for these exceptions. It will be
            # replaced during the next _get_conn() call.
            clean_exit = False
            if isinstance(e, (BaseSSLError, CertificateError)):
                e = SSLError(e)
            elif isinstance(e, (SocketError, NewConnectionError)) and self.proxy:
                e = ProxyError(&apos;Cannot connect to proxy.&apos;, e)
            elif isinstance(e, (SocketError, HTTPException)):
                e = ProtocolError(&apos;Connection aborted.&apos;, e)
    
            retries = retries.increment(method, url, error=e, _pool=self,
&gt;                                       _stacktrace=sys.exc_info()[2])

..\..\..\..\AppData\Local\Programs\Python\Python37\lib\site-packages\urllib3\connectionpool.py:641: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = Retry(total=0, connect=None, read=False, redirect=None, status=None)
method = &apos;POST&apos;, url = &apos;/login&apos;, response = None
error = NewConnectionError(&apos;&lt;urllib3.connection.HTTPConnection object at 0x0000020F9B926DA0&gt;: Failed to establish a new connec...roperly respond after a period of time, or established connection failed because connected host has failed to respond&apos;)
_pool = &lt;urllib3.connectionpool.HTTPConnectionPool object at 0x0000020F9B8F32B0&gt;
_stacktrace = &lt;traceback object at 0x0000020F9ADE7188&gt;

    def increment(self, method=None, url=None, response=None, error=None,
                  _pool=None, _stacktrace=None):
        &quot;&quot;&quot; Return a new Retry object with incremented retry counters.
    
        :param response: A response object, or None, if the server did not
            return a response.
        :type response: :class:`~urllib3.response.HTTPResponse`
        :param Exception error: An error encountered during the request, or
            None if the response was received successfully.
    
        :return: A new ``Retry`` object.
        &quot;&quot;&quot;
        if self.total is False and error:
            # Disabled, indicate to re-raise the error.
            raise six.reraise(type(error), error, _stacktrace)
    
        total = self.total
        if total is not None:
            total -= 1
    
        connect = self.connect
        read = self.read
        redirect = self.redirect
        status_count = self.status
        cause = &apos;unknown&apos;
        status = None
        redirect_location = None
    
        if error and self._is_connection_error(error):
            # Connect retry?
            if connect is False:
                raise six.reraise(type(error), error, _stacktrace)
            elif connect is not None:
                connect -= 1
    
        elif error and self._is_read_error(error):
            # Read retry?
            if read is False or not self._is_method_retryable(method):
                raise six.reraise(type(error), error, _stacktrace)
            elif read is not None:
                read -= 1
    
        elif response and response.get_redirect_location():
            # Redirect retry?
            if redirect is not None:
                redirect -= 1
            cause = &apos;too many redirects&apos;
            redirect_location = response.get_redirect_location()
            status = response.status
    
        else:
            # Incrementing because of a server error like a 500 in
            # status_forcelist and a the given method is in the whitelist
            cause = ResponseError.GENERIC_ERROR
            if response and response.status:
                if status_count is not None:
                    status_count -= 1
                cause = ResponseError.SPECIFIC_ERROR.format(
                    status_code=response.status)
                status = response.status
    
        history = self.history + (RequestHistory(method, url, error, status, redirect_location),)
    
        new_retry = self.new(
            total=total,
            connect=connect, read=read, redirect=redirect, status=status_count,
            history=history)
    
        if new_retry.is_exhausted():
&gt;           raise MaxRetryError(_pool, url, error or ResponseError(cause))
E           urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host=&apos;119.123.2.1&apos;, port=8980): Max retries exceeded with url: /login (Caused by NewConnectionError(&apos;&lt;urllib3.connection.HTTPConnection object at 0x0000020F9B926DA0&gt;: Failed to establish a new connection: [WinError 10060] A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond&apos;))

..\..\..\..\AppData\Local\Programs\Python\Python37\lib\site-packages\urllib3\util\retry.py:399: MaxRetryError

During handling of the above exception, another exception occurred:

self = &lt;testsuite.test_KMS.TestCase_KMS object at 0x0000020F9B90BFD0&gt;
param = {&apos;password&apos;: &apos; sdad@1332&apos;, &apos;remember_flag&apos;: &apos;true&apos;, &apos;username&apos;: &apos;zhangwenke&apos;}
desc = &apos;用户正确密码错误&apos;, expect = {&apos;code&apos;: 200}
json_template = &lt;function json_template.&lt;locals&gt;.read_template_by_test_name at 0x0000020F9B92E158&gt;

&gt;   ???

C:\Users\ZWK\Desktop\home\BearFramework\testsuite\test_KMS.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
..\..\..\..\AppData\Local\Programs\Python\Python37\lib\site-packages\requests\api.py:116: in post
    return request(&apos;post&apos;, url, data=data, json=json, **kwargs)
..\..\..\..\AppData\Local\Programs\Python\Python37\lib\site-packages\requests\api.py:60: in request
    return session.request(method=method, url=url, **kwargs)
..\..\..\..\AppData\Local\Programs\Python\Python37\lib\site-packages\requests\sessions.py:533: in request
    resp = self.send(prep, **send_kwargs)
..\..\..\..\AppData\Local\Programs\Python\Python37\lib\site-packages\requests\sessions.py:646: in send
    r = adapter.send(request, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;requests.adapters.HTTPAdapter object at 0x0000020F9B926FD0&gt;
request = &lt;PreparedRequest [POST]&gt;, stream = False
timeout = &lt;urllib3.util.timeout.Timeout object at 0x0000020F9AC9A748&gt;
verify = True, cert = None, proxies = OrderedDict()

    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):
        &quot;&quot;&quot;Sends PreparedRequest object. Returns Response object.
    
        :param request: The :class:`PreparedRequest &lt;PreparedRequest&gt;` being sent.
        :param stream: (optional) Whether to stream the request content.
        :param timeout: (optional) How long to wait for the server to send
            data before giving up, as a float, or a :ref:`(connect timeout,
            read timeout) &lt;timeouts&gt;` tuple.
        :type timeout: float or tuple or urllib3 Timeout object
        :param verify: (optional) Either a boolean, in which case it controls whether
            we verify the server&apos;s TLS certificate, or a string, in which case it
            must be a path to a CA bundle to use
        :param cert: (optional) Any user-provided SSL certificate to be trusted.
        :param proxies: (optional) The proxies dictionary to apply to the request.
        :rtype: requests.Response
        &quot;&quot;&quot;
    
        try:
            conn = self.get_connection(request.url, proxies)
        except LocationValueError as e:
            raise InvalidURL(e, request=request)
    
        self.cert_verify(conn, request.url, verify, cert)
        url = self.request_url(request, proxies)
        self.add_headers(request, stream=stream, timeout=timeout, verify=verify, cert=cert, proxies=proxies)
    
        chunked = not (request.body is None or &apos;Content-Length&apos; in request.headers)
    
        if isinstance(timeout, tuple):
            try:
                connect, read = timeout
                timeout = TimeoutSauce(connect=connect, read=read)
            except ValueError as e:
                # this may raise a string formatting error.
                err = (&quot;Invalid timeout {}. Pass a (connect, read) &quot;
                       &quot;timeout tuple, or a single float to set &quot;
                       &quot;both timeouts to the same value&quot;.format(timeout))
                raise ValueError(err)
        elif isinstance(timeout, TimeoutSauce):
            pass
        else:
            timeout = TimeoutSauce(connect=timeout, read=timeout)
    
        try:
            if not chunked:
                resp = conn.urlopen(
                    method=request.method,
                    url=url,
                    body=request.body,
                    headers=request.headers,
                    redirect=False,
                    assert_same_host=False,
                    preload_content=False,
                    decode_content=False,
                    retries=self.max_retries,
                    timeout=timeout
                )
    
            # Send the request.
            else:
                if hasattr(conn, &apos;proxy_pool&apos;):
                    conn = conn.proxy_pool
    
                low_conn = conn._get_conn(timeout=DEFAULT_POOL_TIMEOUT)
    
                try:
                    low_conn.putrequest(request.method,
                                        url,
                                        skip_accept_encoding=True)
    
                    for header, value in request.headers.items():
                        low_conn.putheader(header, value)
    
                    low_conn.endheaders()
    
                    for i in request.body:
                        low_conn.send(hex(len(i))[2:].encode(&apos;utf-8&apos;))
                        low_conn.send(b&apos;\r\n&apos;)
                        low_conn.send(i)
                        low_conn.send(b&apos;\r\n&apos;)
                    low_conn.send(b&apos;0\r\n\r\n&apos;)
    
                    # Receive the response from the server
                    try:
                        # For Python 2.7, use buffering of HTTP responses
                        r = low_conn.getresponse(buffering=True)
                    except TypeError:
                        # For compatibility with Python 3.3+
                        r = low_conn.getresponse()
    
                    resp = HTTPResponse.from_httplib(
                        r,
                        pool=conn,
                        connection=low_conn,
                        preload_content=False,
                        decode_content=False
                    )
                except:
                    # If we hit any problems here, clean up the connection.
                    # Then, reraise so that we can handle the actual exception.
                    low_conn.close()
                    raise
    
        except (ProtocolError, socket.error) as err:
            raise ConnectionError(err, request=request)
    
        except MaxRetryError as e:
            if isinstance(e.reason, ConnectTimeoutError):
                # TODO: Remove this in 3.0.0: see #2811
                if not isinstance(e.reason, NewConnectionError):
                    raise ConnectTimeout(e, request=request)
    
            if isinstance(e.reason, ResponseError):
                raise RetryError(e, request=request)
    
            if isinstance(e.reason, _ProxyError):
                raise ProxyError(e, request=request)
    
            if isinstance(e.reason, _SSLError):
                # This branch is for urllib3 v1.22 and later.
                raise SSLError(e, request=request)
    
&gt;           raise ConnectionError(e, request=request)
E           requests.exceptions.ConnectionError: HTTPConnectionPool(host=&apos;119.123.2.1&apos;, port=8980): Max retries exceeded with url: /login (Caused by NewConnectionError(&apos;&lt;urllib3.connection.HTTPConnection object at 0x0000020F9B926DA0&gt;: Failed to establish a new connection: [WinError 10060] A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond&apos;))

..\..\..\..\AppData\Local\Programs\Python\Python37\lib\site-packages\requests\adapters.py:516: ConnectionError</failure><system-err>[2021-10-27 22:55:00] [INFO] Initiate environment config file successfully!
testsuite\test_KMS.py:17: PytestExperimentalApiWarning: record_xml_attribute is an experimental feature
  @pytest.mark.parametrize(&quot;param,desc,expect&quot;, [[{&apos;password&apos;: &apos; sdad@1332&apos;, &apos;username&apos;: &apos;zhangwenke&apos;, &apos;remember_flag&apos;: &apos;true&apos;}, &apos;用户正确密码错误&apos;, {&apos;code&apos;: 200}], [{&apos;password&apos;: &apos;aaaa1111!&apos;, &apos;username&apos;: &apos;zhangwenke&apos;, &apos;remember_flag&apos;: &apos;true&apos;}, &apos;用户密码均正确&apos;, {&apos;code&apos;: 200}]])
[2021-10-27 22:55:00] [DEBUG] Prepare to call function :[check] and parameter is :[(&apos;true&apos;,)]
[2021-10-27 22:55:00] [DEBUG] The formatted data is :[{&apos;id&apos;: &apos;12324235545&apos;, &apos;params&apos;: {&apos;name&apos;: &apos;zhangwenke&apos;, &apos;passcode&apos;: &apos; sdad@1332&apos;, &apos;check&apos;: &apos;true&apos;}}]
</system-err></testcase><testcase classname="testsuite.test_KMS.TestCase_KMS" file="testsuite\test_KMS.py" line="16" name="test_login_kms[param1-\u7528\u6237\u5bc6\u7801\u5747\u6b63\u786e-expect1]" tester="zhangwenke" time="0.003"><properties><property name="outcome" value="111"/><property name="log" value="&lt;_pytest.logging.LogCaptureFixture object at 0x0000020F9BD1DB38&gt;"/></properties><failure message="NameError: 入参模板的json文件名称和map映射文件中的函数名称[test_login_kms]不一致">self = &lt;lib.core.formateParm.JsonTemplateReader object at 0x0000020F9BD1DC50&gt;
test_name = &apos;test_login_kms&apos;
kwargs = {&apos;password&apos;: &apos;aaaa1111!&apos;, &apos;remember_flag&apos;: &apos;true&apos;, &apos;username&apos;: &apos;zhangwenke&apos;}

    def get_data(self, test_name, **kwargs):
        try:
&gt;           template = self.env.get_template(&quot;{}.json&quot;.format(test_name))

..\lib\core\formateParm.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;jinja2.environment.Environment object at 0x0000020F9BD1D9B0&gt;
name = &apos;test_login_kms.json&apos;, parent = None, globals = None

    @internalcode
    def get_template(self, name, parent=None, globals=None):
        &quot;&quot;&quot;Load a template from the loader.  If a loader is configured this
        method asks the loader for the template and returns a :class:`Template`.
        If the `parent` parameter is not `None`, :meth:`join_path` is called
        to get the real template name before loading.
    
        The `globals` parameter can be used to provide template wide globals.
        These variables are available in the context at render time.
    
        If the template does not exist a :exc:`TemplateNotFound` exception is
        raised.
    
        .. versionchanged:: 2.4
           If `name` is a :class:`Template` object it is returned from the
           function unchanged.
        &quot;&quot;&quot;
        if isinstance(name, Template):
            return name
        if parent is not None:
            name = self.join_path(name, parent)
&gt;       return self._load_template(name, self.make_globals(globals))

..\..\..\..\AppData\Local\Programs\Python\Python37\lib\site-packages\jinja2\environment.py:883: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;jinja2.environment.Environment object at 0x0000020F9BD1D9B0&gt;
name = &apos;test_login_kms.json&apos;
globals = {&apos;cycler&apos;: &lt;class &apos;jinja2.utils.Cycler&apos;&gt;, &apos;dict&apos;: &lt;class &apos;dict&apos;&gt;, &apos;joiner&apos;: &lt;class &apos;jinja2.utils.Joiner&apos;&gt;, &apos;lipsum&apos;: &lt;function generate_lorem_ipsum at 0x0000020F9AB341E0&gt;, ...}

    @internalcode
    def _load_template(self, name, globals):
        if self.loader is None:
            raise TypeError(&quot;no loader for this environment specified&quot;)
        cache_key = (weakref.ref(self.loader), name)
        if self.cache is not None:
            template = self.cache.get(cache_key)
            if template is not None and (
                not self.auto_reload or template.is_up_to_date
            ):
                return template
&gt;       template = self.loader.load(self, name, globals)

..\..\..\..\AppData\Local\Programs\Python\Python37\lib\site-packages\jinja2\environment.py:857: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;jinja2.loaders.FileSystemLoader object at 0x0000020F9BD1D668&gt;
environment = &lt;jinja2.environment.Environment object at 0x0000020F9BD1D9B0&gt;
name = &apos;test_login_kms.json&apos;
globals = {&apos;cycler&apos;: &lt;class &apos;jinja2.utils.Cycler&apos;&gt;, &apos;dict&apos;: &lt;class &apos;dict&apos;&gt;, &apos;joiner&apos;: &lt;class &apos;jinja2.utils.Joiner&apos;&gt;, &apos;lipsum&apos;: &lt;function generate_lorem_ipsum at 0x0000020F9AB341E0&gt;, ...}

    @internalcode
    def load(self, environment, name, globals=None):
        &quot;&quot;&quot;Loads a template.  This method looks up the template in the cache
        or loads one by calling :meth:`get_source`.  Subclasses should not
        override this method as loaders working on collections of other
        loaders (such as :class:`PrefixLoader` or :class:`ChoiceLoader`)
        will not call this method but `get_source` directly.
        &quot;&quot;&quot;
        code = None
        if globals is None:
            globals = {}
    
        # first we try to get the source for this template together
        # with the filename and the uptodate function.
&gt;       source, filename, uptodate = self.get_source(environment, name)

..\..\..\..\AppData\Local\Programs\Python\Python37\lib\site-packages\jinja2\loaders.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;jinja2.loaders.FileSystemLoader object at 0x0000020F9BD1D668&gt;
environment = &lt;jinja2.environment.Environment object at 0x0000020F9BD1D9B0&gt;
template = &apos;test_login_kms.json&apos;

    def get_source(self, environment, template):
        pieces = split_template_path(template)
        for searchpath in self.searchpath:
            filename = path.join(searchpath, *pieces)
            f = open_if_exists(filename)
            if f is None:
                continue
            try:
                contents = f.read().decode(self.encoding)
            finally:
                f.close()
    
            mtime = path.getmtime(filename)
    
            def uptodate():
                try:
                    return path.getmtime(filename) == mtime
                except OSError:
                    return False
    
            return contents, filename, uptodate
&gt;       raise TemplateNotFound(template)
E       jinja2.exceptions.TemplateNotFound: test_login_kms.json

..\..\..\..\AppData\Local\Programs\Python\Python37\lib\site-packages\jinja2\loaders.py:197: TemplateNotFound

During handling of the above exception, another exception occurred:

self = &lt;testsuite.test_KMS.TestCase_KMS object at 0x0000020F9BD1D6A0&gt;
param = {&apos;password&apos;: &apos;aaaa1111!&apos;, &apos;remember_flag&apos;: &apos;true&apos;, &apos;username&apos;: &apos;zhangwenke&apos;}
desc = &apos;用户密码均正确&apos;, expect = {&apos;code&apos;: 200}
json_template = &lt;function json_template.&lt;locals&gt;.read_template_by_test_name at 0x0000020F9B99E7B8&gt;

&gt;   ???

C:\Users\ZWK\Desktop\home\BearFramework\testsuite\test_KMS.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
conftest.py:29: in read_template_by_test_name
    return JsonTemplateReader().get_data(request.function.__name__, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;lib.core.formateParm.JsonTemplateReader object at 0x0000020F9BD1DC50&gt;
test_name = &apos;test_login_kms&apos;
kwargs = {&apos;password&apos;: &apos;aaaa1111!&apos;, &apos;remember_flag&apos;: &apos;true&apos;, &apos;username&apos;: &apos;zhangwenke&apos;}

    def get_data(self, test_name, **kwargs):
        try:
            template = self.env.get_template(&quot;{}.json&quot;.format(test_name))
            return json.loads(template.render(**kwargs))
        except TemplateNotFound:
&gt;           raise NameError(f&quot;入参模板的json文件名称和map映射文件中的函数名称[{test_name}]不一致&quot;)
E           NameError: 入参模板的json文件名称和map映射文件中的函数名称[test_login_kms]不一致

..\lib\core\formateParm.py:22: NameError</failure><system-err>testsuite\test_KMS.py:17: PytestExperimentalApiWarning: record_xml_attribute is an experimental feature
  @pytest.mark.parametrize(&quot;param,desc,expect&quot;, [[{&apos;password&apos;: &apos; sdad@1332&apos;, &apos;username&apos;: &apos;zhangwenke&apos;, &apos;remember_flag&apos;: &apos;true&apos;}, &apos;用户正确密码错误&apos;, {&apos;code&apos;: 200}], [{&apos;password&apos;: &apos;aaaa1111!&apos;, &apos;username&apos;: &apos;zhangwenke&apos;, &apos;remember_flag&apos;: &apos;true&apos;}, &apos;用户密码均正确&apos;, {&apos;code&apos;: 200}]])
</system-err></testcase><testcase classname="testsuite.test_UUMS.TestCase_UUMS" file="C:\Users\ZWK\Desktop\home\BearFramework\testsuite\test_UUMS.py" line="16" name="test_uums_login[param0-\u8d26\u53f7\u4e0d\u5b58\u5728\u5bc6\u7801\u6b63\u786e-expect0]" tester="zhangwenke" time="0.002"><properties><property name="outcome" value="111"/><property name="log" value="&lt;_pytest.logging.LogCaptureFixture object at 0x0000020F9B9505C0&gt;"/></properties><failure message="NameError: 入参模板的json文件名称和map映射文件中的函数名称[test_uums_login]不一致">self = &lt;lib.core.formateParm.JsonTemplateReader object at 0x0000020F9B926D68&gt;
test_name = &apos;test_uums_login&apos;
kwargs = {&apos;name&apos;: &apos;ribn&apos;, &apos;passcode&apos;: &apos;aaaa1111!&apos;}

    def get_data(self, test_name, **kwargs):
        try:
&gt;           template = self.env.get_template(&quot;{}.json&quot;.format(test_name))

..\lib\core\formateParm.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;jinja2.environment.Environment object at 0x0000020F9B9506A0&gt;
name = &apos;test_uums_login.json&apos;, parent = None, globals = None

    @internalcode
    def get_template(self, name, parent=None, globals=None):
        &quot;&quot;&quot;Load a template from the loader.  If a loader is configured this
        method asks the loader for the template and returns a :class:`Template`.
        If the `parent` parameter is not `None`, :meth:`join_path` is called
        to get the real template name before loading.
    
        The `globals` parameter can be used to provide template wide globals.
        These variables are available in the context at render time.
    
        If the template does not exist a :exc:`TemplateNotFound` exception is
        raised.
    
        .. versionchanged:: 2.4
           If `name` is a :class:`Template` object it is returned from the
           function unchanged.
        &quot;&quot;&quot;
        if isinstance(name, Template):
            return name
        if parent is not None:
            name = self.join_path(name, parent)
&gt;       return self._load_template(name, self.make_globals(globals))

..\..\..\..\AppData\Local\Programs\Python\Python37\lib\site-packages\jinja2\environment.py:883: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;jinja2.environment.Environment object at 0x0000020F9B9506A0&gt;
name = &apos;test_uums_login.json&apos;
globals = {&apos;cycler&apos;: &lt;class &apos;jinja2.utils.Cycler&apos;&gt;, &apos;dict&apos;: &lt;class &apos;dict&apos;&gt;, &apos;joiner&apos;: &lt;class &apos;jinja2.utils.Joiner&apos;&gt;, &apos;lipsum&apos;: &lt;function generate_lorem_ipsum at 0x0000020F9AB341E0&gt;, ...}

    @internalcode
    def _load_template(self, name, globals):
        if self.loader is None:
            raise TypeError(&quot;no loader for this environment specified&quot;)
        cache_key = (weakref.ref(self.loader), name)
        if self.cache is not None:
            template = self.cache.get(cache_key)
            if template is not None and (
                not self.auto_reload or template.is_up_to_date
            ):
                return template
&gt;       template = self.loader.load(self, name, globals)

..\..\..\..\AppData\Local\Programs\Python\Python37\lib\site-packages\jinja2\environment.py:857: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;jinja2.loaders.FileSystemLoader object at 0x0000020F9B950710&gt;
environment = &lt;jinja2.environment.Environment object at 0x0000020F9B9506A0&gt;
name = &apos;test_uums_login.json&apos;
globals = {&apos;cycler&apos;: &lt;class &apos;jinja2.utils.Cycler&apos;&gt;, &apos;dict&apos;: &lt;class &apos;dict&apos;&gt;, &apos;joiner&apos;: &lt;class &apos;jinja2.utils.Joiner&apos;&gt;, &apos;lipsum&apos;: &lt;function generate_lorem_ipsum at 0x0000020F9AB341E0&gt;, ...}

    @internalcode
    def load(self, environment, name, globals=None):
        &quot;&quot;&quot;Loads a template.  This method looks up the template in the cache
        or loads one by calling :meth:`get_source`.  Subclasses should not
        override this method as loaders working on collections of other
        loaders (such as :class:`PrefixLoader` or :class:`ChoiceLoader`)
        will not call this method but `get_source` directly.
        &quot;&quot;&quot;
        code = None
        if globals is None:
            globals = {}
    
        # first we try to get the source for this template together
        # with the filename and the uptodate function.
&gt;       source, filename, uptodate = self.get_source(environment, name)

..\..\..\..\AppData\Local\Programs\Python\Python37\lib\site-packages\jinja2\loaders.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;jinja2.loaders.FileSystemLoader object at 0x0000020F9B950710&gt;
environment = &lt;jinja2.environment.Environment object at 0x0000020F9B9506A0&gt;
template = &apos;test_uums_login.json&apos;

    def get_source(self, environment, template):
        pieces = split_template_path(template)
        for searchpath in self.searchpath:
            filename = path.join(searchpath, *pieces)
            f = open_if_exists(filename)
            if f is None:
                continue
            try:
                contents = f.read().decode(self.encoding)
            finally:
                f.close()
    
            mtime = path.getmtime(filename)
    
            def uptodate():
                try:
                    return path.getmtime(filename) == mtime
                except OSError:
                    return False
    
            return contents, filename, uptodate
&gt;       raise TemplateNotFound(template)
E       jinja2.exceptions.TemplateNotFound: test_uums_login.json

..\..\..\..\AppData\Local\Programs\Python\Python37\lib\site-packages\jinja2\loaders.py:197: TemplateNotFound

During handling of the above exception, another exception occurred:

self = &lt;testsuite.test_UUMS.TestCase_UUMS object at 0x0000020F9B9266D8&gt;
param = {&apos;name&apos;: &apos;ribn&apos;, &apos;passcode&apos;: &apos;aaaa1111!&apos;}, desc = &apos;账号不存在密码正确&apos;
expect = {&apos;code&apos;: 10032, &apos;message&apos;: &apos;用户不存在&apos;, &apos;result&apos;: &apos; false&apos;}
json_template = &lt;function json_template.&lt;locals&gt;.read_template_by_test_name at 0x0000020F9BA4BE18&gt;

&gt;   ???

C:\Users\ZWK\Desktop\home\BearFramework\testsuite\test_UUMS.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
conftest.py:29: in read_template_by_test_name
    return JsonTemplateReader().get_data(request.function.__name__, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;lib.core.formateParm.JsonTemplateReader object at 0x0000020F9B926D68&gt;
test_name = &apos;test_uums_login&apos;
kwargs = {&apos;name&apos;: &apos;ribn&apos;, &apos;passcode&apos;: &apos;aaaa1111!&apos;}

    def get_data(self, test_name, **kwargs):
        try:
            template = self.env.get_template(&quot;{}.json&quot;.format(test_name))
            return json.loads(template.render(**kwargs))
        except TemplateNotFound:
&gt;           raise NameError(f&quot;入参模板的json文件名称和map映射文件中的函数名称[{test_name}]不一致&quot;)
E           NameError: 入参模板的json文件名称和map映射文件中的函数名称[test_uums_login]不一致

..\lib\core\formateParm.py:22: NameError</failure><system-err>C:\Users\ZWK\Desktop\home\BearFramework\testsuite\test_UUMS.py:17: PytestExperimentalApiWarning: record_xml_attribute is an experimental feature
  @pytest.mark.parametrize(&quot;param,desc,expect&quot;, [[{&apos;name&apos;: &apos;ribn&apos;, &apos;passcode&apos;: &apos;aaaa1111!&apos;}, &apos;账号不存在密码正确&apos;, {&apos;code&apos;: 10032, &apos;result&apos;: &apos; false&apos;, &apos;message&apos;: &apos;用户不存在&apos;}], [{&apos;name&apos;: &apos;猪宝宝&apos;, &apos;passcode&apos;: &apos;aaaa1111!&apos;}, &apos;登录账号和密码正确&apos;, {&apos;code&apos;: 200, &apos;result&apos;: &apos;sussess&apos;}]])
</system-err></testcase><testcase classname="testsuite.test_UUMS.TestCase_UUMS" file="C:\Users\ZWK\Desktop\home\BearFramework\testsuite\test_UUMS.py" line="16" name="test_uums_login[param1-\u767b\u5f55\u8d26\u53f7\u548c\u5bc6\u7801\u6b63\u786e-expect1]" tester="zhangwenke" time="0.000"><properties><property name="outcome" value="111"/><property name="log" value="&lt;_pytest.logging.LogCaptureFixture object at 0x0000020F9BB087B8&gt;"/></properties><failure message="NameError: 入参模板的json文件名称和map映射文件中的函数名称[test_uums_login]不一致">self = &lt;lib.core.formateParm.JsonTemplateReader object at 0x0000020F9BB08358&gt;
test_name = &apos;test_uums_login&apos;, kwargs = {&apos;name&apos;: &apos;猪宝宝&apos;, &apos;passcode&apos;: &apos;aaaa1111!&apos;}

    def get_data(self, test_name, **kwargs):
        try:
&gt;           template = self.env.get_template(&quot;{}.json&quot;.format(test_name))

..\lib\core\formateParm.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;jinja2.environment.Environment object at 0x0000020F9BA82D30&gt;
name = &apos;test_uums_login.json&apos;, parent = None, globals = None

    @internalcode
    def get_template(self, name, parent=None, globals=None):
        &quot;&quot;&quot;Load a template from the loader.  If a loader is configured this
        method asks the loader for the template and returns a :class:`Template`.
        If the `parent` parameter is not `None`, :meth:`join_path` is called
        to get the real template name before loading.
    
        The `globals` parameter can be used to provide template wide globals.
        These variables are available in the context at render time.
    
        If the template does not exist a :exc:`TemplateNotFound` exception is
        raised.
    
        .. versionchanged:: 2.4
           If `name` is a :class:`Template` object it is returned from the
           function unchanged.
        &quot;&quot;&quot;
        if isinstance(name, Template):
            return name
        if parent is not None:
            name = self.join_path(name, parent)
&gt;       return self._load_template(name, self.make_globals(globals))

..\..\..\..\AppData\Local\Programs\Python\Python37\lib\site-packages\jinja2\environment.py:883: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;jinja2.environment.Environment object at 0x0000020F9BA82D30&gt;
name = &apos;test_uums_login.json&apos;
globals = {&apos;cycler&apos;: &lt;class &apos;jinja2.utils.Cycler&apos;&gt;, &apos;dict&apos;: &lt;class &apos;dict&apos;&gt;, &apos;joiner&apos;: &lt;class &apos;jinja2.utils.Joiner&apos;&gt;, &apos;lipsum&apos;: &lt;function generate_lorem_ipsum at 0x0000020F9AB341E0&gt;, ...}

    @internalcode
    def _load_template(self, name, globals):
        if self.loader is None:
            raise TypeError(&quot;no loader for this environment specified&quot;)
        cache_key = (weakref.ref(self.loader), name)
        if self.cache is not None:
            template = self.cache.get(cache_key)
            if template is not None and (
                not self.auto_reload or template.is_up_to_date
            ):
                return template
&gt;       template = self.loader.load(self, name, globals)

..\..\..\..\AppData\Local\Programs\Python\Python37\lib\site-packages\jinja2\environment.py:857: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;jinja2.loaders.FileSystemLoader object at 0x0000020F9BA82EF0&gt;
environment = &lt;jinja2.environment.Environment object at 0x0000020F9BA82D30&gt;
name = &apos;test_uums_login.json&apos;
globals = {&apos;cycler&apos;: &lt;class &apos;jinja2.utils.Cycler&apos;&gt;, &apos;dict&apos;: &lt;class &apos;dict&apos;&gt;, &apos;joiner&apos;: &lt;class &apos;jinja2.utils.Joiner&apos;&gt;, &apos;lipsum&apos;: &lt;function generate_lorem_ipsum at 0x0000020F9AB341E0&gt;, ...}

    @internalcode
    def load(self, environment, name, globals=None):
        &quot;&quot;&quot;Loads a template.  This method looks up the template in the cache
        or loads one by calling :meth:`get_source`.  Subclasses should not
        override this method as loaders working on collections of other
        loaders (such as :class:`PrefixLoader` or :class:`ChoiceLoader`)
        will not call this method but `get_source` directly.
        &quot;&quot;&quot;
        code = None
        if globals is None:
            globals = {}
    
        # first we try to get the source for this template together
        # with the filename and the uptodate function.
&gt;       source, filename, uptodate = self.get_source(environment, name)

..\..\..\..\AppData\Local\Programs\Python\Python37\lib\site-packages\jinja2\loaders.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;jinja2.loaders.FileSystemLoader object at 0x0000020F9BA82EF0&gt;
environment = &lt;jinja2.environment.Environment object at 0x0000020F9BA82D30&gt;
template = &apos;test_uums_login.json&apos;

    def get_source(self, environment, template):
        pieces = split_template_path(template)
        for searchpath in self.searchpath:
            filename = path.join(searchpath, *pieces)
            f = open_if_exists(filename)
            if f is None:
                continue
            try:
                contents = f.read().decode(self.encoding)
            finally:
                f.close()
    
            mtime = path.getmtime(filename)
    
            def uptodate():
                try:
                    return path.getmtime(filename) == mtime
                except OSError:
                    return False
    
            return contents, filename, uptodate
&gt;       raise TemplateNotFound(template)
E       jinja2.exceptions.TemplateNotFound: test_uums_login.json

..\..\..\..\AppData\Local\Programs\Python\Python37\lib\site-packages\jinja2\loaders.py:197: TemplateNotFound

During handling of the above exception, another exception occurred:

self = &lt;testsuite.test_UUMS.TestCase_UUMS object at 0x0000020F9BB08390&gt;
param = {&apos;name&apos;: &apos;猪宝宝&apos;, &apos;passcode&apos;: &apos;aaaa1111!&apos;}, desc = &apos;登录账号和密码正确&apos;
expect = {&apos;code&apos;: 200, &apos;result&apos;: &apos;sussess&apos;}
json_template = &lt;function json_template.&lt;locals&gt;.read_template_by_test_name at 0x0000020F9BA4BA60&gt;

&gt;   ???

C:\Users\ZWK\Desktop\home\BearFramework\testsuite\test_UUMS.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
conftest.py:29: in read_template_by_test_name
    return JsonTemplateReader().get_data(request.function.__name__, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;lib.core.formateParm.JsonTemplateReader object at 0x0000020F9BB08358&gt;
test_name = &apos;test_uums_login&apos;, kwargs = {&apos;name&apos;: &apos;猪宝宝&apos;, &apos;passcode&apos;: &apos;aaaa1111!&apos;}

    def get_data(self, test_name, **kwargs):
        try:
            template = self.env.get_template(&quot;{}.json&quot;.format(test_name))
            return json.loads(template.render(**kwargs))
        except TemplateNotFound:
&gt;           raise NameError(f&quot;入参模板的json文件名称和map映射文件中的函数名称[{test_name}]不一致&quot;)
E           NameError: 入参模板的json文件名称和map映射文件中的函数名称[test_uums_login]不一致

..\lib\core\formateParm.py:22: NameError</failure><system-err>C:\Users\ZWK\Desktop\home\BearFramework\testsuite\test_UUMS.py:17: PytestExperimentalApiWarning: record_xml_attribute is an experimental feature
</system-err></testcase></testsuite></testsuites>